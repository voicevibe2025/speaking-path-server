# Generated by Django 4.2.5 on 2025-08-20 03:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LearningModule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('module_type', models.CharField(choices=[('pronunciation', 'Pronunciation'), ('grammar', 'Grammar'), ('vocabulary', 'Vocabulary'), ('fluency', 'Fluency'), ('listening', 'Listening'), ('cultural', 'Cultural Context'), ('scenario', 'Scenario Practice'), ('assessment', 'Assessment')], max_length=20)),
                ('order_index', models.IntegerField(help_text='Order of module in the path')),
                ('learning_objectives', models.JSONField(default=list)),
                ('prerequisites', models.JSONField(default=list, help_text='List of prerequisite module IDs')),
                ('content', models.JSONField(default=dict, help_text='Module content and resources')),
                ('estimated_duration_minutes', models.IntegerField(validators=[django.core.validators.MinValueValidator(5)])),
                ('minimum_score', models.IntegerField(default=70, help_text='Minimum score to pass the module', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('max_attempts', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1)])),
                ('is_locked', models.BooleanField(default=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('completion_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('unlocked_at', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['learning_path', 'order_index'],
            },
        ),
        migrations.CreateModel(
            name='LearningPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('path_type', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('business', 'Business English'), ('academic', 'Academic English'), ('conversational', 'Conversational'), ('exam_prep', 'Exam Preparation'), ('custom', 'Custom Path')], max_length=20)),
                ('difficulty_level', models.CharField(choices=[('A1', 'A1 - Beginner'), ('A2', 'A2 - Elementary'), ('B1', 'B1 - Intermediate'), ('B2', 'B2 - Upper Intermediate'), ('C1', 'C1 - Advanced'), ('C2', 'C2 - Proficiency')], max_length=5)),
                ('learning_goal', models.TextField(help_text='Main objective of this learning path')),
                ('estimated_duration_weeks', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(52)])),
                ('target_proficiency', models.CharField(choices=[('A1', 'A1 - Beginner'), ('A2', 'A2 - Elementary'), ('B1', 'B1 - Intermediate'), ('B2', 'B2 - Upper Intermediate'), ('C1', 'C1 - Advanced'), ('C2', 'C2 - Proficiency')], max_length=5)),
                ('is_active', models.BooleanField(default=True)),
                ('progress_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('current_module_index', models.IntegerField(default=0)),
                ('focus_areas', models.JSONField(default=list, help_text='List of focus areas like pronunciation, grammar, etc.')),
                ('cultural_context', models.JSONField(default=dict, help_text='Cultural adaptation parameters')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_paths', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('milestone_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('milestone_type', models.CharField(choices=[('module_completion', 'Module Completion'), ('path_completion', 'Path Completion'), ('score_achievement', 'Score Achievement'), ('streak', 'Practice Streak'), ('proficiency', 'Proficiency Level'), ('special', 'Special Achievement')], max_length=20)),
                ('requirements', models.JSONField(default=dict, help_text='Conditions to achieve milestone')),
                ('points', models.IntegerField(default=100)),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
                ('badge_image', models.URLField(blank=True, null=True)),
                ('cultural_reference', models.CharField(blank=True, help_text='e.g., Wayang character, Batik pattern', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('learning_path', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='learning_paths.learningpath')),
            ],
            options={
                'ordering': ['learning_path', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ModuleActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('activity_type', models.CharField(choices=[('lesson', 'Lesson'), ('practice', 'Practice Exercise'), ('quiz', 'Quiz'), ('speaking', 'Speaking Practice'), ('listening', 'Listening Exercise'), ('roleplay', 'Role Play'), ('assessment', 'Assessment')], max_length=20)),
                ('order_index', models.IntegerField()),
                ('instructions', models.TextField()),
                ('content', models.JSONField(default=dict, help_text='Activity content, questions, scenarios, etc.')),
                ('resources', models.JSONField(default=list, help_text='URLs to resources, materials')),
                ('estimated_duration_minutes', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('points', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('passing_score', models.IntegerField(default=70, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('requires_ai_evaluation', models.BooleanField(default=False)),
                ('ai_evaluation_criteria', models.JSONField(blank=True, default=dict, null=True)),
                ('cultural_notes', models.TextField(blank=True, null=True)),
                ('indonesian_context', models.JSONField(blank=True, default=dict, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='learning_paths.learningmodule')),
            ],
            options={
                'ordering': ['module', 'order_index'],
                'unique_together': {('module', 'order_index')},
            },
        ),
        migrations.AddField(
            model_name='learningmodule',
            name='learning_path',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='learning_paths.learningpath'),
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('skipped', 'Skipped')], default='not_started', max_length=20)),
                ('score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('attempts', models.IntegerField(default=0)),
                ('time_spent_minutes', models.IntegerField(default=0)),
                ('results', models.JSONField(default=dict, help_text='Detailed results, answers, feedback')),
                ('ai_feedback', models.JSONField(blank=True, default=dict, null=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_attempt_at', models.DateTimeField(auto_now=True)),
                ('activity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='learning_paths.moduleactivity')),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='learning_paths.learningpath')),
                ('module', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='learning_paths.learningmodule')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_attempt_at'],
                'indexes': [models.Index(fields=['user', 'learning_path'], name='learning_pa_user_id_b82ce6_idx'), models.Index(fields=['user', 'module'], name='learning_pa_user_id_fd9341_idx')],
                'unique_together': {('user', 'learning_path', 'module', 'activity')},
            },
        ),
        migrations.CreateModel(
            name='UserMilestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achieved_at', models.DateTimeField(auto_now_add=True)),
                ('achievement_data', models.JSONField(default=dict, help_text='Data related to achievement')),
                ('learning_path', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='learning_paths.learningpath')),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='learning_paths.milestone')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achieved_milestones', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-achieved_at'],
                'unique_together': {('user', 'milestone')},
            },
        ),
        migrations.AddIndex(
            model_name='learningpath',
            index=models.Index(fields=['user', 'is_active'], name='learning_pa_user_id_d19213_idx'),
        ),
        migrations.AddIndex(
            model_name='learningpath',
            index=models.Index(fields=['path_type', 'difficulty_level'], name='learning_pa_path_ty_96746d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='learningmodule',
            unique_together={('learning_path', 'order_index')},
        ),
    ]
