# Generated by Django 4.2.5 on 2025-08-20 03:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('avatar_url', models.URLField(blank=True)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('native_language', models.CharField(default='id', help_text='ISO 639-1 language code', max_length=10)),
                ('target_language', models.CharField(default='en', help_text='ISO 639-1 language code', max_length=10)),
                ('current_proficiency', models.CharField(choices=[('beginner', 'Beginner'), ('elementary', 'Elementary'), ('intermediate', 'Intermediate'), ('upper_intermediate', 'Upper Intermediate'), ('advanced', 'Advanced'), ('proficient', 'Proficient')], default='beginner', max_length=20)),
                ('learning_goal', models.CharField(choices=[('business', 'Business Communication'), ('academic', 'Academic English'), ('conversational', 'Conversational English'), ('travel', 'Travel English'), ('professional', 'Professional Development'), ('exam_prep', 'Exam Preparation')], default='conversational', max_length=20)),
                ('daily_practice_goal', models.IntegerField(default=15, help_text='Daily practice goal in minutes', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(120)])),
                ('preferred_session_duration', models.IntegerField(default=10, help_text='Preferred session duration in minutes', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(60)])),
                ('power_distance_preference', models.FloatField(default=78.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('individualism_preference', models.FloatField(default=14.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('masculinity_preference', models.FloatField(default=46.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('uncertainty_avoidance_preference', models.FloatField(default=48.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('long_term_orientation_preference', models.FloatField(default=62.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('preferred_reward_type', models.CharField(choices=[('badges', 'Badges'), ('points', 'Points'), ('achievements', 'Achievements'), ('leaderboard', 'Leaderboard')], default='badges', max_length=20)),
                ('enable_notifications', models.BooleanField(default=True)),
                ('enable_reminders', models.BooleanField(default=True)),
                ('total_practice_time', models.IntegerField(default=0)),
                ('streak_days', models.IntegerField(default=0)),
                ('last_practice_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='LearningPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_scenarios', models.JSONField(default=list, help_text='List of preferred scenario types')),
                ('avoided_topics', models.JSONField(default=list, help_text='List of topics to avoid')),
                ('visual_learning', models.IntegerField(default=5, help_text='Preference for visual learning (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('auditory_learning', models.IntegerField(default=5, help_text='Preference for auditory learning (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('kinesthetic_learning', models.IntegerField(default=5, help_text='Preference for kinesthetic learning (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('immediate_correction', models.BooleanField(default=True, help_text='Prefer immediate correction during practice')),
                ('detailed_feedback', models.BooleanField(default=True, help_text='Prefer detailed feedback after sessions')),
                ('cultural_context', models.BooleanField(default=True, help_text='Include cultural context in feedback')),
                ('ai_personality', models.CharField(choices=[('friendly', 'Friendly'), ('professional', 'Professional'), ('encouraging', 'Encouraging'), ('strict', 'Strict'), ('casual', 'Casual')], default='encouraging', max_length=20)),
                ('difficulty_adaptation_speed', models.FloatField(default=0.5, help_text='How quickly to adapt difficulty (0.1-1.0)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='learning_preference', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Learning Preference',
                'verbose_name_plural': 'Learning Preferences',
                'db_table': 'learning_preferences',
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement_type', models.CharField(max_length=50)),
                ('achievement_name', models.CharField(max_length=100)),
                ('achievement_description', models.TextField()),
                ('category', models.CharField(choices=[('practice', 'Practice'), ('streak', 'Streak'), ('proficiency', 'Proficiency'), ('social', 'Social'), ('cultural', 'Cultural')], max_length=20)),
                ('points_earned', models.IntegerField(default=0)),
                ('badge_image_url', models.URLField(blank=True)),
                ('progress_current', models.IntegerField(default=0)),
                ('progress_target', models.IntegerField(default=1)),
                ('is_completed', models.BooleanField(default=False)),
                ('earned_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Achievement',
                'verbose_name_plural': 'User Achievements',
                'db_table': 'user_achievements',
                'unique_together': {('user', 'achievement_type')},
            },
        ),
    ]
