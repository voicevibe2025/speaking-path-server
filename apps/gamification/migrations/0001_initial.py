# Generated by Django 4.2.5 on 2025-08-20 03:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('badge_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('pronunciation', 'Pronunciation'), ('grammar', 'Grammar'), ('fluency', 'Fluency'), ('vocabulary', 'Vocabulary'), ('cultural', 'Cultural Understanding'), ('streak', 'Consistency'), ('collaboration', 'Gotong Royong'), ('special', 'Special Achievement')], max_length=20)),
                ('batik_pattern', models.CharField(choices=[('kawung', 'Kawung - Wisdom and Justice'), ('parang', 'Parang - Strength and Continuity'), ('sido_mukti', 'Sido Mukti - Prosperity'), ('truntum', 'Truntum - Love and Loyalty'), ('mega_mendung', 'Mega Mendung - Patience'), ('sekar_jagad', 'Sekar Jagad - Diversity'), ('ceplok', 'Ceplok - Harmony and Balance')], max_length=20)),
                ('pattern_color', models.CharField(default='#000000', help_text='Hex color code', max_length=7)),
                ('requirements', models.JSONField(default=dict)),
                ('points_value', models.IntegerField(default=50)),
                ('icon', models.CharField(max_length=50)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('tier', models.IntegerField(default=1, help_text='1=Bronze, 2=Silver, 3=Gold, 4=Platinum, 5=Diamond', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'tier', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DailyQuest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quest_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('quest_type', models.CharField(choices=[('speaking_practice', 'Complete Speaking Practice'), ('pronunciation', 'Pronunciation Exercise'), ('vocabulary', 'Learn New Vocabulary'), ('grammar', 'Grammar Challenge'), ('cultural', 'Cultural Scenario'), ('peer_review', 'Review Peer Recording'), ('streak', 'Maintain Streak')], max_length=20)),
                ('requirements', models.JSONField(default=dict)),
                ('target_value', models.IntegerField(default=1)),
                ('experience_points', models.IntegerField(default=10)),
                ('bonus_points', models.IntegerField(default=5, help_text='Bonus for completion streak')),
                ('is_active', models.BooleanField(default=True)),
                ('available_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-available_date'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leaderboard_type', models.CharField(choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('all_time', 'All Time'), ('pronunciation', 'Pronunciation Masters'), ('fluency', 'Fluency Champions'), ('gotong_royong', 'Gotong Royong Leaders'), ('regional', 'Regional (Indonesian Provinces)')], max_length=20)),
                ('period_start', models.DateTimeField(blank=True, null=True)),
                ('period_end', models.DateTimeField(blank=True, null=True)),
                ('region', models.CharField(blank=True, help_text='Indonesian province for regional leaderboards', max_length=50, null=True)),
                ('rankings', models.JSONField(default=list)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-period_start'],
                'unique_together': {('leaderboard_type', 'period_start', 'region')},
            },
        ),
        migrations.CreateModel(
            name='RewardShop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reward_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('reward_type', models.CharField(choices=[('avatar_frame', 'Wayang Avatar Frame'), ('title', 'Special Title'), ('voice_pack', 'Voice Feedback Pack'), ('theme', 'App Theme'), ('boost', 'XP Boost'), ('unlock', 'Content Unlock'), ('cultural', 'Cultural Content')], max_length=20)),
                ('point_cost', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('level_requirement', models.IntegerField(default=1)),
                ('icon', models.CharField(max_length=50)),
                ('preview_image', models.URLField(blank=True, null=True)),
                ('cultural_reference', models.CharField(blank=True, help_text='Indonesian cultural reference', max_length=100, null=True)),
                ('is_limited', models.BooleanField(default=False)),
                ('stock_remaining', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['point_cost', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acquired_at', models.DateTimeField(auto_now_add=True)),
                ('acquisition_type', models.CharField(choices=[('purchase', 'Purchased'), ('achievement', 'Achievement Reward'), ('event', 'Event Reward'), ('gift', 'Gifted')], default='purchase', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('equipped_at', models.DateTimeField(blank=True, null=True)),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_purchases', to='gamification.rewardshop')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rewards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-acquired_at'],
            },
        ),
        migrations.CreateModel(
            name='UserLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('experience_points', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_points_earned', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('wayang_character', models.CharField(choices=[('Semar', 'Semar - The Wise Beginner'), ('Gareng', 'Gareng - The Determined Learner'), ('Petruk', 'Petruk - The Eloquent Speaker'), ('Bagong', 'Bagong - The Confident Communicator'), ('Arjuna', 'Arjuna - The Skilled Practitioner'), ('Bima', 'Bima - The Strong Achiever'), ('Yudhistira', 'Yudhistira - The Master Speaker')], default='Semar', max_length=50)),
                ('mentor_since', models.DateTimeField(blank=True, null=True)),
                ('streak_days', models.IntegerField(default=0)),
                ('longest_streak', models.IntegerField(default=0)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mentor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mentees', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='level_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-current_level', '-experience_points'],
            },
        ),
        migrations.CreateModel(
            name='GotongRoyongChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('challenge_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('challenge_type', models.CharField(choices=[('group_practice', 'Group Practice Session'), ('peer_review', 'Peer Review Exchange'), ('pronunciation_relay', 'Pronunciation Relay'), ('vocabulary_building', 'Collaborative Vocabulary Building'), ('cultural_exchange', 'Cultural Exchange'), ('storytelling', 'Chain Storytelling')], max_length=30)),
                ('minimum_participants', models.IntegerField(default=2)),
                ('maximum_participants', models.IntegerField(default=10)),
                ('duration_days', models.IntegerField(default=7)),
                ('goal_description', models.TextField()),
                ('goal_target', models.IntegerField(help_text='Target score/count/etc.')),
                ('reward_points', models.IntegerField(default=100)),
                ('is_active', models.BooleanField(default=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reward_badge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gamification.badge')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='UserQuest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_progress', models.IntegerField(default=0)),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('points_earned', models.IntegerField(default=0)),
                ('rewards_claimed', models.BooleanField(default=False)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('quest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='gamification.dailyquest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_quests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
                'unique_together': {('user', 'quest')},
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('progress_data', models.JSONField(default=dict, help_text='Progress towards next tier')),
                ('current_tier', models.IntegerField(default=1)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to='gamification.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'badge')},
            },
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField()),
                ('score', models.IntegerField()),
                ('sessions_completed', models.IntegerField(default=0)),
                ('average_score', models.FloatField(default=0)),
                ('improvement_rate', models.FloatField(default=0)),
                ('wayang_character', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('leaderboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='gamification.leaderboard')),
                ('primary_badge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gamification.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['leaderboard', 'rank'],
                'unique_together': {('leaderboard', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ChallengeParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('contribution_score', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('final_score', models.IntegerField(blank=True, null=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='gamification.gotongroyongchallenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-joined_at'],
                'unique_together': {('challenge', 'user')},
            },
        ),
    ]
