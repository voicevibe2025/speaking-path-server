# Generated by Django 4.2.5 on 2025-08-20 03:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PracticeSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('session_type', models.CharField(choices=[('free_practice', 'Free Practice'), ('scenario_based', 'Scenario Based'), ('pronunciation', 'Pronunciation Practice'), ('conversation', 'Conversation'), ('vocabulary', 'Vocabulary Practice'), ('grammar', 'Grammar Practice')], default='free_practice', max_length=20)),
                ('session_status', models.CharField(choices=[('initiated', 'Initiated'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('error', 'Error')], default='initiated', max_length=15)),
                ('scenario_id', models.CharField(blank=True, max_length=100)),
                ('scenario_title', models.CharField(blank=True, max_length=200)),
                ('scenario_description', models.TextField(blank=True)),
                ('scenario_difficulty', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('target_language', models.CharField(default='en', max_length=10)),
                ('target_proficiency', models.CharField(blank=True, max_length=20)),
                ('duration_seconds', models.IntegerField(default=0)),
                ('word_count', models.IntegerField(default=0)),
                ('sentence_count', models.IntegerField(default=0)),
                ('pronunciation_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('fluency_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('grammar_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('vocabulary_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('overall_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ai_feedback', models.JSONField(blank=True, default=dict)),
                ('cultural_feedback', models.JSONField(blank=True, default=dict)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='practice_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Practice Session',
                'verbose_name_plural': 'Practice Sessions',
                'db_table': 'practice_sessions',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='SessionFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('pronunciation', 'Pronunciation'), ('grammar', 'Grammar'), ('vocabulary', 'Vocabulary'), ('fluency', 'Fluency'), ('cultural', 'Cultural'), ('pragmatic', 'Pragmatic')], max_length=20)),
                ('feedback_text', models.TextField()),
                ('severity', models.CharField(choices=[('info', 'Info'), ('minor', 'Minor'), ('moderate', 'Moderate'), ('major', 'Major')], default='info', max_length=10)),
                ('error_word', models.CharField(blank=True, max_length=100)),
                ('correct_form', models.CharField(blank=True, max_length=100)),
                ('position_start', models.IntegerField(blank=True, null=True)),
                ('position_end', models.IntegerField(blank=True, null=True)),
                ('recommendation', models.TextField(blank=True)),
                ('resource_links', models.JSONField(blank=True, default=list)),
                ('cultural_note', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback_items', to='speaking_sessions.practicesession')),
            ],
            options={
                'verbose_name': 'Session Feedback',
                'verbose_name_plural': 'Session Feedback Items',
                'db_table': 'session_feedback',
                'ordering': ['session', 'feedback_type'],
            },
        ),
        migrations.CreateModel(
            name='AudioRecording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recording_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('sequence_number', models.IntegerField(default=1)),
                ('recording_status', models.CharField(choices=[('uploading', 'Uploading'), ('uploaded', 'Uploaded'), ('processing', 'Processing'), ('transcribed', 'Transcribed'), ('analyzed', 'Analyzed'), ('error', 'Error')], default='uploading', max_length=15)),
                ('audio_url', models.URLField(blank=True)),
                ('audio_format', models.CharField(default='webm', max_length=10)),
                ('duration_seconds', models.FloatField(default=0)),
                ('file_size_bytes', models.IntegerField(default=0)),
                ('sample_rate', models.IntegerField(default=16000)),
                ('transcription_text', models.TextField(blank=True)),
                ('transcription_confidence', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('whisper_response', models.JSONField(blank=True, default=dict)),
                ('phonetic_analysis', models.JSONField(blank=True, default=dict)),
                ('prosody_analysis', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audio_recordings', to='speaking_sessions.practicesession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audio_recordings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audio Recording',
                'verbose_name_plural': 'Audio Recordings',
                'db_table': 'audio_recordings',
                'ordering': ['session', 'sequence_number'],
            },
        ),
        migrations.CreateModel(
            name='RealTimeTranscript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chunk_index', models.IntegerField()),
                ('chunk_text', models.TextField()),
                ('is_final', models.BooleanField(default=False)),
                ('start_time', models.FloatField()),
                ('end_time', models.FloatField()),
                ('confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='realtime_transcripts', to='speaking_sessions.practicesession')),
            ],
            options={
                'verbose_name': 'Real-time Transcript',
                'verbose_name_plural': 'Real-time Transcripts',
                'db_table': 'realtime_transcripts',
                'ordering': ['session', 'chunk_index'],
                'unique_together': {('session', 'chunk_index')},
            },
        ),
        migrations.AddIndex(
            model_name='practicesession',
            index=models.Index(fields=['user', '-started_at'], name='practice_se_user_id_787242_idx'),
        ),
        migrations.AddIndex(
            model_name='practicesession',
            index=models.Index(fields=['session_id'], name='practice_se_session_7ba14d_idx'),
        ),
        migrations.AddIndex(
            model_name='audiorecording',
            index=models.Index(fields=['recording_id'], name='audio_recor_recordi_eac41d_idx'),
        ),
        migrations.AddIndex(
            model_name='audiorecording',
            index=models.Index(fields=['session', 'sequence_number'], name='audio_recor_session_7315e8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='audiorecording',
            unique_together={('session', 'sequence_number')},
        ),
    ]
