# Generated by Django 4.2.5 on 2025-08-20 03:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('speaking_sessions', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_practice_time_minutes', models.IntegerField(default=0)),
                ('total_sessions_completed', models.IntegerField(default=0)),
                ('average_session_duration_minutes', models.FloatField(default=0.0)),
                ('current_streak_days', models.IntegerField(default=0)),
                ('longest_streak_days', models.IntegerField(default=0)),
                ('last_practice_date', models.DateField(blank=True, null=True)),
                ('overall_proficiency_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('pronunciation_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('fluency_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('vocabulary_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('grammar_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('coherence_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('initial_proficiency_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('improvement_rate', models.FloatField(default=0.0)),
                ('preferred_practice_time', models.CharField(blank=True, choices=[('morning', 'Morning (6am-12pm)'), ('afternoon', 'Afternoon (12pm-6pm)'), ('evening', 'Evening (6pm-10pm)'), ('night', 'Night (10pm-6am)')], max_length=20)),
                ('average_words_per_minute', models.FloatField(default=0.0)),
                ('vocabulary_size_estimate', models.IntegerField(default=0)),
                ('scenarios_completed', models.IntegerField(default=0)),
                ('achievements_earned', models.IntegerField(default=0)),
                ('feedback_interactions', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Analytics',
                'verbose_name_plural': 'User Analytics',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='SkillAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('assessment_type', models.CharField(choices=[('initial', 'Initial Assessment'), ('weekly', 'Weekly Assessment'), ('monthly', 'Monthly Assessment'), ('milestone', 'Milestone Assessment'), ('final', 'Final Assessment')], max_length=30)),
                ('assessment_date', models.DateTimeField()),
                ('pronunciation_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('fluency_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('vocabulary_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('grammar_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('coherence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('cultural_appropriateness_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('overall_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('proficiency_level', models.CharField(choices=[('beginner', 'Beginner'), ('elementary', 'Elementary'), ('intermediate', 'Intermediate'), ('upper_intermediate', 'Upper Intermediate'), ('advanced', 'Advanced'), ('proficient', 'Proficient')], max_length=20)),
                ('strengths', models.JSONField(default=list)),
                ('weaknesses', models.JSONField(default=list)),
                ('recommendations', models.JSONField(default=list)),
                ('improvement_from_last', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_assessments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Skill Assessment',
                'verbose_name_plural': 'Skill Assessments',
                'ordering': ['-assessment_date'],
                'indexes': [models.Index(fields=['user', '-assessment_date'], name='analytics_s_user_id_1549cb_idx'), models.Index(fields=['assessment_type', '-assessment_date'], name='analytics_s_assessm_2e0569_idx')],
            },
        ),
        migrations.CreateModel(
            name='SessionAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analytics_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('session_type', models.CharField(choices=[('free_practice', 'Free Practice'), ('scenario_based', 'Scenario Based'), ('assessment', 'Assessment'), ('lesson', 'Lesson'), ('conversation', 'Conversation')], max_length=30)),
                ('scenario_id', models.CharField(blank=True, max_length=50)),
                ('difficulty_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('duration_seconds', models.IntegerField()),
                ('speaking_time_seconds', models.IntegerField(default=0)),
                ('silence_time_seconds', models.IntegerField(default=0)),
                ('overall_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('pronunciation_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('fluency_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('vocabulary_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('grammar_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('coherence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_words', models.IntegerField(default=0)),
                ('unique_words', models.IntegerField(default=0)),
                ('words_per_minute', models.FloatField(default=0.0)),
                ('filler_words_count', models.IntegerField(default=0)),
                ('pronunciation_errors_count', models.IntegerField(default=0)),
                ('grammar_errors_count', models.IntegerField(default=0)),
                ('vocabulary_errors_count', models.IntegerField(default=0)),
                ('common_errors', models.JSONField(default=dict)),
                ('pause_count', models.IntegerField(default=0)),
                ('retry_count', models.IntegerField(default=0)),
                ('hint_requests', models.IntegerField(default=0)),
                ('is_completed', models.BooleanField(default=False)),
                ('completion_percentage', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='speaking_sessions.practicesession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Session Analytics',
                'verbose_name_plural': 'Session Analytics',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='analytics_s_user_id_c2aa6c_idx'), models.Index(fields=['session_type', '-created_at'], name='analytics_s_session_7aaaea_idx')],
            },
        ),
        migrations.CreateModel(
            name='LearningProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('date', models.DateField()),
                ('week_number', models.IntegerField()),
                ('month', models.IntegerField()),
                ('year', models.IntegerField()),
                ('practice_time_minutes', models.IntegerField(default=0)),
                ('sessions_count', models.IntegerField(default=0)),
                ('words_practiced', models.IntegerField(default=0)),
                ('scenarios_completed', models.IntegerField(default=0)),
                ('avg_pronunciation_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('avg_fluency_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('avg_vocabulary_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('avg_grammar_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('avg_coherence_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('skills_improved', models.JSONField(default=list)),
                ('daily_goal_minutes', models.IntegerField(default=30)),
                ('goal_achieved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Learning Progress',
                'verbose_name_plural': 'Learning Progress',
                'ordering': ['-date'],
                'indexes': [models.Index(fields=['user', '-date'], name='analytics_l_user_id_063aae_idx'), models.Index(fields=['week_number', 'year'], name='analytics_l_week_nu_801cb5_idx')],
                'unique_together': {('user', 'date')},
            },
        ),
        migrations.CreateModel(
            name='ErrorPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pattern_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('error_type', models.CharField(choices=[('pronunciation', 'Pronunciation'), ('grammar', 'Grammar'), ('vocabulary', 'Vocabulary'), ('fluency', 'Fluency'), ('coherence', 'Coherence'), ('cultural', 'Cultural')], max_length=30)),
                ('error_pattern', models.CharField(max_length=200)),
                ('error_description', models.TextField()),
                ('example_errors', models.JSONField(default=list)),
                ('correct_forms', models.JSONField(default=list)),
                ('occurrence_count', models.IntegerField(default=1)),
                ('last_occurrence', models.DateTimeField()),
                ('severity_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('impact_on_communication', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('is_improving', models.BooleanField(default=False)),
                ('improvement_rate', models.FloatField(default=0.0)),
                ('targeted_exercises', models.JSONField(default=list)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='error_patterns', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Error Pattern',
                'verbose_name_plural': 'Error Patterns',
                'ordering': ['-occurrence_count', '-last_occurrence'],
                'indexes': [models.Index(fields=['user', 'error_type', '-occurrence_count'], name='analytics_e_user_id_174ed7_idx')],
            },
        ),
    ]
