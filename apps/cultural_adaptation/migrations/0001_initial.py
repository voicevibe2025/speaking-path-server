# Generated by Django 4.2.5 on 2025-08-20 03:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CulturalFeedbackTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('feedback_type', models.CharField(choices=[('encouragement', 'Encouragement'), ('correction', 'Correction'), ('achievement', 'Achievement'), ('suggestion', 'Suggestion'), ('milestone', 'Milestone')], max_length=20)),
                ('template_english', models.TextField()),
                ('template_indonesian', models.TextField()),
                ('template_mixed', models.TextField(help_text='Mixed language template')),
                ('uses_indirect_language', models.BooleanField(default=True)),
                ('includes_encouragement', models.BooleanField(default=True)),
                ('avoids_direct_criticism', models.BooleanField(default=True)),
                ('min_level', models.IntegerField(default=1)),
                ('max_level', models.IntegerField(default=100)),
                ('regional_variations', models.JSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Cultural Feedback Template',
                'verbose_name_plural': 'Cultural Feedback Templates',
                'db_table': 'cultural_feedback_templates',
            },
        ),
        migrations.CreateModel(
            name='CulturalScenario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scenario_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('title_indonesian', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('description_indonesian', models.TextField()),
                ('context_type', models.CharField(choices=[('formal_business', 'Formal Business'), ('casual_social', 'Casual Social'), ('education', 'Educational'), ('family', 'Family/Relative'), ('marketplace', 'Traditional Market'), ('religious', 'Religious Context'), ('government', 'Government Office'), ('healthcare', 'Healthcare'), ('tourism', 'Tourism'), ('technology', 'Technology')], max_length=30)),
                ('formality_level', models.CharField(choices=[('very_formal', 'Very Formal'), ('formal', 'Formal'), ('neutral', 'Neutral'), ('informal', 'Informal'), ('very_informal', 'Very Informal')], max_length=20)),
                ('involves_hierarchy', models.BooleanField(default=False)),
                ('involves_face_saving', models.BooleanField(default=False)),
                ('involves_indirect_communication', models.BooleanField(default=False)),
                ('involves_group_harmony', models.BooleanField(default=False)),
                ('relevant_regions', models.JSONField(blank=True, default=list)),
                ('example_phrases', models.JSONField(default=list)),
                ('cultural_notes', models.JSONField(default=dict)),
                ('difficulty_level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('image_url', models.URLField(blank=True, null=True)),
                ('audio_example_url', models.URLField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Cultural Scenario',
                'verbose_name_plural': 'Cultural Scenarios',
                'db_table': 'cultural_scenarios',
                'ordering': ['difficulty_level', 'context_type'],
            },
        ),
        migrations.CreateModel(
            name='IndonesianEnglishMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mapping_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('indonesian_pattern', models.CharField(max_length=200)),
                ('english_equivalent', models.CharField(max_length=200)),
                ('interference_type', models.CharField(choices=[('pronunciation', 'Pronunciation'), ('grammar', 'Grammar'), ('vocabulary', 'Vocabulary'), ('idiom', 'Idiom'), ('pragmatic', 'Pragmatic')], max_length=20)),
                ('common_error', models.TextField()),
                ('correct_form', models.TextField()),
                ('explanation', models.TextField()),
                ('explanation_indonesian', models.TextField()),
                ('difficulty_level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('frequency_score', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('teaching_tips', models.JSONField(default=list)),
                ('practice_exercises', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Indonesian-English Mapping',
                'verbose_name_plural': 'Indonesian-English Mappings',
                'db_table': 'indonesian_english_mappings',
                'ordering': ['-frequency_score', 'difficulty_level'],
            },
        ),
        migrations.CreateModel(
            name='CulturalProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(choices=[('jakarta', 'DKI Jakarta'), ('west_java', 'Jawa Barat'), ('central_java', 'Jawa Tengah'), ('east_java', 'Jawa Timur'), ('bali', 'Bali'), ('sumatra', 'Sumatra'), ('kalimantan', 'Kalimantan'), ('sulawesi', 'Sulawesi'), ('papua', 'Papua'), ('other', 'Other')], max_length=20)),
                ('urban_rural', models.CharField(choices=[('urban', 'Urban'), ('rural', 'Rural')], max_length=10)),
                ('age_group', models.CharField(choices=[('teen', '13-17'), ('young', '18-25'), ('adult', '26-35'), ('middle', '36-50'), ('senior', '50+')], max_length=10)),
                ('education_level', models.CharField(choices=[('sd', 'SD (Elementary)'), ('smp', 'SMP (Junior High)'), ('sma', 'SMA (Senior High)'), ('d3', 'D3 (Diploma)'), ('s1', 'S1 (Bachelor)'), ('s2', 'S2 (Master)'), ('s3', 'S3 (Doctorate)')], max_length=10)),
                ('profession_category', models.CharField(blank=True, choices=[('student', 'Student'), ('professional', 'Professional'), ('business', 'Business Owner'), ('government', 'Government Employee'), ('healthcare', 'Healthcare Worker'), ('education', 'Educator'), ('creative', 'Creative Industry'), ('technology', 'Technology'), ('other', 'Other')], max_length=20, null=True)),
                ('power_distance_index', models.IntegerField(default=78, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('individualism_index', models.IntegerField(default=14, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('masculinity_index', models.IntegerField(default=46, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('uncertainty_avoidance_index', models.IntegerField(default=48, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('long_term_orientation_index', models.IntegerField(default=62, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('indulgence_index', models.IntegerField(default=38, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('primary_language', models.CharField(default='Bahasa Indonesia', max_length=50)),
                ('regional_language', models.CharField(blank=True, max_length=50, null=True)),
                ('english_exposure_level', models.CharField(choices=[('none', 'No exposure'), ('minimal', 'Minimal exposure'), ('moderate', 'Moderate exposure'), ('frequent', 'Frequent exposure'), ('daily', 'Daily exposure')], default='minimal', max_length=20)),
                ('prefers_group_learning', models.BooleanField(default=True)),
                ('prefers_hierarchical_structure', models.BooleanField(default=True)),
                ('needs_face_saving_feedback', models.BooleanField(default=True)),
                ('values_relationship_building', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cultural_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Cultural Profile',
                'verbose_name_plural': 'Cultural Profiles',
                'db_table': 'cultural_profiles',
            },
        ),
        migrations.CreateModel(
            name='CulturalAdaptationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prefers_bilingual_instructions', models.BooleanField(default=True)),
                ('prefers_local_examples', models.BooleanField(default=True)),
                ('prefers_religious_neutral_content', models.BooleanField(default=False)),
                ('feedback_language', models.CharField(choices=[('english', 'English Only'), ('indonesian', 'Indonesian Only'), ('mixed', 'Mixed'), ('adaptive', 'Adaptive')], default='mixed', max_length=20)),
                ('feedback_formality', models.CharField(choices=[('formal', 'Formal'), ('neutral', 'Neutral'), ('casual', 'Casual')], default='neutral', max_length=20)),
                ('prefers_individual_achievements', models.BooleanField(default=False)),
                ('prefers_group_achievements', models.BooleanField(default=True)),
                ('prefers_competition', models.BooleanField(default=False)),
                ('prefers_collaboration', models.BooleanField(default=True)),
                ('visual_learner_score', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('auditory_learner_score', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('kinesthetic_learner_score', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cultural_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Cultural Adaptation Preference',
                'verbose_name_plural': 'Cultural Adaptation Preferences',
                'db_table': 'cultural_adaptation_preferences',
            },
        ),
    ]
